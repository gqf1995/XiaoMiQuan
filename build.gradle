// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "conf.gradle"
buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2' // add plugin

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
ext {
    minSdkVersion = project.hasProperty('minSdkVersion') ? project.getProperty('minSdkVersion') : 19
    compileSdkVersion = project.hasProperty('compileSdkVersion') ? project.getProperty('compileSdkVersion') : 27
    buildToolsVersion = project.hasProperty('buildToolsVersion') ? project.getProperty('buildToolsVersion') : '27.0.0'

    supportLibraryVersion = project.hasProperty('supportLibraryVersion') ? project.getProperty('supportLibraryVersion') : '27.0.0'

    sourceCompatibility = JavaVersion.VERSION_1_7
    minifyEnabled = false
    versionCode = 1
    versionName = "1.0"
    documentationFolder = "${rootDir}/outputDoc/"
}
task deleteExistingZip(type: Delete) {
    delete file("outputAar/sciChart.zip")
}
gradle.projectsEvaluated {
    deleteExistingZip.dependsOn "" +
            ":core:testReleaseUnitTest",
            ":data:testReleaseUnitTest",
            ":drawing:testReleaseUnitTest",
            ":charting:testReleaseUnitTest",
            ":extensions:testReleaseUnitTest"
}
task zip(type: Zip, dependsOn: deleteExistingZip) {
    from ('charting/build/outputs/aar') {
        include 'charting-release.aar'
    }
    from ('drawing/build/outputs/aar') {
        include 'drawing-release.aar'
    }
    from ('data/build/outputs/aar') {
        include 'data-release.aar'
    }
    from ('core/build/outputs/aar') {
        include 'core-release.aar'
    }
    from ('extensions/build/outputs/aar') {
        include 'extensions-release.aar'
    }
    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChart'
}
task deleteExistingJavadocZip(type: Delete) {
    delete file("outputAar/sciChartJavadocs.zip")
}
gradle.projectsEvaluated {
    deleteExistingJavadocZip.dependsOn "" +
            ":core:generateReleaseJavadocJar",
            ":data:generateReleaseJavadocJar",
            ":drawing:generateReleaseJavadocJar",
            ":charting:generateReleaseJavadocJar"
}
task zipJavadocs(type: Zip, dependsOn: deleteExistingJavadocZip) {
    from (rootProject.ext.documentationFolder) {
        include 'charting-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'drawing-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'data-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'core-release-javadoc.jar'
    }
    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChartJavadocs'
}

allprojects {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://jitpack.io" }
        google()
    }
    task cleanJavadocOutput(type: Delete, description: 'Clean Javadoc output') {
        delete("${rootDir}/outputJavadoc/${project.getName()}")
    }
}
subprojects {
}
task clean(type: Delete) {
    delete rootProject.buildDir
}
