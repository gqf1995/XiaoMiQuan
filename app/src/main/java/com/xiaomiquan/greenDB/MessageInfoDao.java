package com.xiaomiquan.greenDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaomiquan.entity.bean.MessageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_INFO".
*/
public class MessageInfoDao extends AbstractDao<MessageInfo, Long> {

    public static final String TABLENAME = "MESSAGE_INFO";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property IsLook = new Property(3, boolean.class, "isLook", false, "IS_LOOK");
        public final static Property PushId = new Property(4, String.class, "pushId", false, "PUSH_ID");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
    }


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"MESSAGE\" TEXT," + // 1: message
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"IS_LOOK\" INTEGER NOT NULL ," + // 3: isLook
                "\"PUSH_ID\" TEXT," + // 4: pushId
                "\"TYPE\" TEXT);"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getIsLook() ? 1L: 0L);
 
        String pushId = entity.getPushId();
        if (pushId != null) {
            stmt.bindString(5, pushId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getIsLook() ? 1L: 0L);
 
        String pushId = entity.getPushId();
        if (pushId != null) {
            stmt.bindString(5, pushId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.getLong(offset + 2), // time
            cursor.getShort(offset + 3) != 0, // isLook
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pushId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setIsLook(cursor.getShort(offset + 3) != 0);
        entity.setPushId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
