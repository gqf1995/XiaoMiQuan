package com.xiaomiquan.greenDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaomiquan.greenDaoUtils.BigDecimalConverter;
import java.math.BigDecimal;

import com.xiaomiquan.entity.bean.kline.KLineBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KLINE_BEAN".
*/
public class KLineBeanDao extends AbstractDao<KLineBean, Long> {

    public static final String TABLENAME = "KLINE_BEAN";

    /**
     * Properties of entity KLineBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property NewDate = new Property(2, java.util.Date.class, "newDate", false, "NEW_DATE");
        public final static Property Timestamp = new Property(3, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Open = new Property(4, String.class, "open", false, "OPEN");
        public final static Property Close = new Property(5, String.class, "close", false, "CLOSE");
        public final static Property High = new Property(6, String.class, "high", false, "HIGH");
        public final static Property Low = new Property(7, String.class, "low", false, "LOW");
        public final static Property Volume = new Property(8, String.class, "volume", false, "VOLUME");
        public final static Property Key = new Property(9, String.class, "key", false, "KEY");
    }

    private final BigDecimalConverter openConverter = new BigDecimalConverter();
    private final BigDecimalConverter closeConverter = new BigDecimalConverter();
    private final BigDecimalConverter highConverter = new BigDecimalConverter();
    private final BigDecimalConverter lowConverter = new BigDecimalConverter();
    private final BigDecimalConverter volumeConverter = new BigDecimalConverter();

    public KLineBeanDao(DaoConfig config) {
        super(config);
    }
    
    public KLineBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KLINE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"NEW_DATE\" INTEGER," + // 2: newDate
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 3: timestamp
                "\"OPEN\" TEXT," + // 4: open
                "\"CLOSE\" TEXT," + // 5: close
                "\"HIGH\" TEXT," + // 6: high
                "\"LOW\" TEXT," + // 7: low
                "\"VOLUME\" TEXT," + // 8: volume
                "\"KEY\" TEXT);"); // 9: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KLINE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KLineBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        java.util.Date newDate = entity.getNewDate();
        if (newDate != null) {
            stmt.bindLong(3, newDate.getTime());
        }
        stmt.bindLong(4, entity.getTimestamp());
 
        BigDecimal open = entity.getOpen();
        if (open != null) {
            stmt.bindString(5, openConverter.convertToDatabaseValue(open));
        }
 
        BigDecimal close = entity.getClose();
        if (close != null) {
            stmt.bindString(6, closeConverter.convertToDatabaseValue(close));
        }
 
        BigDecimal high = entity.getHigh();
        if (high != null) {
            stmt.bindString(7, highConverter.convertToDatabaseValue(high));
        }
 
        BigDecimal low = entity.getLow();
        if (low != null) {
            stmt.bindString(8, lowConverter.convertToDatabaseValue(low));
        }
 
        BigDecimal volume = entity.getVolume();
        if (volume != null) {
            stmt.bindString(9, volumeConverter.convertToDatabaseValue(volume));
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(10, key);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KLineBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        java.util.Date newDate = entity.getNewDate();
        if (newDate != null) {
            stmt.bindLong(3, newDate.getTime());
        }
        stmt.bindLong(4, entity.getTimestamp());
 
        BigDecimal open = entity.getOpen();
        if (open != null) {
            stmt.bindString(5, openConverter.convertToDatabaseValue(open));
        }
 
        BigDecimal close = entity.getClose();
        if (close != null) {
            stmt.bindString(6, closeConverter.convertToDatabaseValue(close));
        }
 
        BigDecimal high = entity.getHigh();
        if (high != null) {
            stmt.bindString(7, highConverter.convertToDatabaseValue(high));
        }
 
        BigDecimal low = entity.getLow();
        if (low != null) {
            stmt.bindString(8, lowConverter.convertToDatabaseValue(low));
        }
 
        BigDecimal volume = entity.getVolume();
        if (volume != null) {
            stmt.bindString(9, volumeConverter.convertToDatabaseValue(volume));
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(10, key);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KLineBean readEntity(Cursor cursor, int offset) {
        KLineBean entity = new KLineBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // newDate
            cursor.getLong(offset + 3), // timestamp
            cursor.isNull(offset + 4) ? null : openConverter.convertToEntityProperty(cursor.getString(offset + 4)), // open
            cursor.isNull(offset + 5) ? null : closeConverter.convertToEntityProperty(cursor.getString(offset + 5)), // close
            cursor.isNull(offset + 6) ? null : highConverter.convertToEntityProperty(cursor.getString(offset + 6)), // high
            cursor.isNull(offset + 7) ? null : lowConverter.convertToEntityProperty(cursor.getString(offset + 7)), // low
            cursor.isNull(offset + 8) ? null : volumeConverter.convertToEntityProperty(cursor.getString(offset + 8)), // volume
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KLineBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTimestamp(cursor.getLong(offset + 3));
        entity.setOpen(cursor.isNull(offset + 4) ? null : openConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setClose(cursor.isNull(offset + 5) ? null : closeConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setHigh(cursor.isNull(offset + 6) ? null : highConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setLow(cursor.isNull(offset + 7) ? null : lowConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setVolume(cursor.isNull(offset + 8) ? null : volumeConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KLineBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KLineBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KLineBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
