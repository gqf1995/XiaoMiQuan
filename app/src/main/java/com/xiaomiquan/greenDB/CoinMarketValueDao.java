package com.xiaomiquan.greenDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xiaomiquan.entity.bean.CoinMarketValue;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COIN_MARKET_VALUE".
*/
public class CoinMarketValueDao extends AbstractDao<CoinMarketValue, Long> {

    public static final String TABLENAME = "COIN_MARKET_VALUE";

    /**
     * Properties of entity CoinMarketValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cid = new Property(0, Long.class, "cid", true, "_id");
        public final static Property _$24h_volume_usd = new Property(1, double.class, "_$24h_volume_usd", false, "_$24H_VOLUME_USD");
        public final static Property AvailableSupply = new Property(2, double.class, "availableSupply", false, "AVAILABLE_SUPPLY");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property LastUpdated = new Property(4, int.class, "lastUpdated", false, "LAST_UPDATED");
        public final static Property MarketCapUsd = new Property(5, double.class, "marketCapUsd", false, "MARKET_CAP_USD");
        public final static Property MaxSupply = new Property(6, double.class, "maxSupply", false, "MAX_SUPPLY");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property OnlyKey = new Property(8, String.class, "onlyKey", false, "ONLY_KEY");
        public final static Property PercentChange1h = new Property(9, double.class, "percentChange1h", false, "PERCENT_CHANGE1H");
        public final static Property PercentChange24h = new Property(10, double.class, "percentChange24h", false, "PERCENT_CHANGE24H");
        public final static Property PercentChange7d = new Property(11, double.class, "percentChange7d", false, "PERCENT_CHANGE7D");
        public final static Property PriceBtc = new Property(12, int.class, "priceBtc", false, "PRICE_BTC");
        public final static Property PriceUsd = new Property(13, double.class, "priceUsd", false, "PRICE_USD");
        public final static Property Rank = new Property(14, int.class, "rank", false, "RANK");
        public final static Property Symbol = new Property(15, String.class, "symbol", false, "SYMBOL");
        public final static Property TotalSupply = new Property(16, double.class, "totalSupply", false, "TOTAL_SUPPLY");
    }


    public CoinMarketValueDao(DaoConfig config) {
        super(config);
    }
    
    public CoinMarketValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COIN_MARKET_VALUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cid
                "\"_$24H_VOLUME_USD\" REAL NOT NULL ," + // 1: _$24h_volume_usd
                "\"AVAILABLE_SUPPLY\" REAL NOT NULL ," + // 2: availableSupply
                "\"ID\" TEXT," + // 3: id
                "\"LAST_UPDATED\" INTEGER NOT NULL ," + // 4: lastUpdated
                "\"MARKET_CAP_USD\" REAL NOT NULL ," + // 5: marketCapUsd
                "\"MAX_SUPPLY\" REAL NOT NULL ," + // 6: maxSupply
                "\"NAME\" TEXT," + // 7: name
                "\"ONLY_KEY\" TEXT UNIQUE ," + // 8: onlyKey
                "\"PERCENT_CHANGE1H\" REAL NOT NULL ," + // 9: percentChange1h
                "\"PERCENT_CHANGE24H\" REAL NOT NULL ," + // 10: percentChange24h
                "\"PERCENT_CHANGE7D\" REAL NOT NULL ," + // 11: percentChange7d
                "\"PRICE_BTC\" INTEGER NOT NULL ," + // 12: priceBtc
                "\"PRICE_USD\" REAL NOT NULL ," + // 13: priceUsd
                "\"RANK\" INTEGER NOT NULL ," + // 14: rank
                "\"SYMBOL\" TEXT," + // 15: symbol
                "\"TOTAL_SUPPLY\" REAL NOT NULL );"); // 16: totalSupply
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COIN_MARKET_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CoinMarketValue entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
        stmt.bindDouble(2, entity.get_$24h_volume_usd());
        stmt.bindDouble(3, entity.getAvailableSupply());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getLastUpdated());
        stmt.bindDouble(6, entity.getMarketCapUsd());
        stmt.bindDouble(7, entity.getMaxSupply());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String onlyKey = entity.getOnlyKey();
        if (onlyKey != null) {
            stmt.bindString(9, onlyKey);
        }
        stmt.bindDouble(10, entity.getPercentChange1h());
        stmt.bindDouble(11, entity.getPercentChange24h());
        stmt.bindDouble(12, entity.getPercentChange7d());
        stmt.bindLong(13, entity.getPriceBtc());
        stmt.bindDouble(14, entity.getPriceUsd());
        stmt.bindLong(15, entity.getRank());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(16, symbol);
        }
        stmt.bindDouble(17, entity.getTotalSupply());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CoinMarketValue entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
        stmt.bindDouble(2, entity.get_$24h_volume_usd());
        stmt.bindDouble(3, entity.getAvailableSupply());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getLastUpdated());
        stmt.bindDouble(6, entity.getMarketCapUsd());
        stmt.bindDouble(7, entity.getMaxSupply());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String onlyKey = entity.getOnlyKey();
        if (onlyKey != null) {
            stmt.bindString(9, onlyKey);
        }
        stmt.bindDouble(10, entity.getPercentChange1h());
        stmt.bindDouble(11, entity.getPercentChange24h());
        stmt.bindDouble(12, entity.getPercentChange7d());
        stmt.bindLong(13, entity.getPriceBtc());
        stmt.bindDouble(14, entity.getPriceUsd());
        stmt.bindLong(15, entity.getRank());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(16, symbol);
        }
        stmt.bindDouble(17, entity.getTotalSupply());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CoinMarketValue readEntity(Cursor cursor, int offset) {
        CoinMarketValue entity = new CoinMarketValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cid
            cursor.getDouble(offset + 1), // _$24h_volume_usd
            cursor.getDouble(offset + 2), // availableSupply
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.getInt(offset + 4), // lastUpdated
            cursor.getDouble(offset + 5), // marketCapUsd
            cursor.getDouble(offset + 6), // maxSupply
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // onlyKey
            cursor.getDouble(offset + 9), // percentChange1h
            cursor.getDouble(offset + 10), // percentChange24h
            cursor.getDouble(offset + 11), // percentChange7d
            cursor.getInt(offset + 12), // priceBtc
            cursor.getDouble(offset + 13), // priceUsd
            cursor.getInt(offset + 14), // rank
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // symbol
            cursor.getDouble(offset + 16) // totalSupply
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CoinMarketValue entity, int offset) {
        entity.setCid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.set_$24h_volume_usd(cursor.getDouble(offset + 1));
        entity.setAvailableSupply(cursor.getDouble(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastUpdated(cursor.getInt(offset + 4));
        entity.setMarketCapUsd(cursor.getDouble(offset + 5));
        entity.setMaxSupply(cursor.getDouble(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOnlyKey(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPercentChange1h(cursor.getDouble(offset + 9));
        entity.setPercentChange24h(cursor.getDouble(offset + 10));
        entity.setPercentChange7d(cursor.getDouble(offset + 11));
        entity.setPriceBtc(cursor.getInt(offset + 12));
        entity.setPriceUsd(cursor.getDouble(offset + 13));
        entity.setRank(cursor.getInt(offset + 14));
        entity.setSymbol(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTotalSupply(cursor.getDouble(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CoinMarketValue entity, long rowId) {
        entity.setCid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CoinMarketValue entity) {
        if(entity != null) {
            return entity.getCid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CoinMarketValue entity) {
        return entity.getCid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
